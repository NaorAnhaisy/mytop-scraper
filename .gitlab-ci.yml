# # before_script:
# #   - apt-get update -qq
# #   - apt-get install -qq git
# #   # Setup SSH deploy keys
# #   - "which ssh-agent || ( apt-get install -qq openssh-client )"
# #   - eval $(ssh-agent -s)
# #   - ssh-add <(echo "$SSH_PRIVATE_KEY")
# #   - mkdir -p ~/.ssh
# #   - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

# # deploy:
# #   stage: deploy
# #   environment:
# #     name: production
# #     url: https://mytor-scripter.com
# #   script:
# #     - bash deploy/deploy.sh
# #   only:
# #     - master



# stages:
#   - build
#   - deploy-stage

# variables:
#   VARIABLE_DATA: Gitlab-CI-YAML

# build:
#   stage: build
#   image: docker:18-git
#   services:
#     - docker:18-dind
#   script:
#     # get node app version from package.json for use in tagging docker image
#     - apk update && apk add jq
#     - export VERSION=`jq -r ".version" < ./package.json`
#     # login to docker
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     # build and tag docker image
#     - docker build -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:latest .
#     # publish finished image
#     - docker push $CI_REGISTRY_IMAGE:$VERSION
#     - docker push $CI_REGISTRY_IMAGE:latest

# deploy-stage:
#   stage: deploy-stage
#   image: alpine:latest
#   script:
#     - chmod og= $SSH_PRIVATE_KEY
#     - apk update && apk add openssh-client
#     # stop existing docker container & remove images
#     - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no root@$DEPLOY_SERVER "docker stop $CI_PROJECT_NAME || true"
#     - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no root@$DEPLOY_SERVER "docker rm $CI_PROJECT_NAME || true"
#     - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no root@$DEPLOY_SERVER "docker image rm $CI_REGISTRY_IMAGE:latest || true"
#     # pull new container
#     - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no root@$DEPLOY_SERVER "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
#     - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no root@$DEPLOY_SERVER "docker pull $CI_REGISTRY_IMAGE:latest"
#     # run new container
#     - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no root@$DEPLOY_SERVER "docker run -d --restart unless-stopped --name $CI_PROJECT_NAME -p 4000:4000 -e "variableData=Docker-Run-Command" $CI_REGISTRY_IMAGE:latest"
